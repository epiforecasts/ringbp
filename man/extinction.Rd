% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/aux_functions.R
\name{extinction}
\alias{extinction}
\alias{extinct_prob}
\alias{detect_extinct}
\title{Outbreak extinction functions}
\usage{
extinct_prob(scenario, extinction_week = max(scenario$week) - 1)

detect_extinct(scenario, extinction_week = max(scenario$week) - 1)
}
\arguments{
\item{scenario}{a \code{data.table}: weekly cases output by \code{\link[=scenario_sim]{scenario_sim()}}}

\item{extinction_week}{a positive \code{integer} scalar or \code{integer} vector to
test if the outbreak has gone extinct (i.e. no new cases) by this week
(zero indexed):
\itemize{
\item A single \code{integer} to to test if extinction has occurred by this week.
For example, \code{extinction_week = 5} tests whether the outbreak is
extinct by week 5 (inclusive) until the end of the outbreak. Default is
to detect extinction in the last 2 weeks of the simulated outbreak:
\code{max(scenario$week) - 1} (i.e. the penultimate and last week of the
outbreak).
\item An \code{integer} vector of length two can be supplied to provide the lower
and upper bounds (inclusive) of the week range to test for whether
extinction occurred by this window. For example
\code{extinction_week = c(5, 10)} will test whether the outbreak went extinct
by week 5 and there we no new cases between weeks 5 and 10 (inclusive).
\item An \code{integer} vector of length \emph{n} can be supplied to provide the weeks
to test for whether extinction occurred by this window. For example
\code{extinction_week = 12:16} will test that there are no new infections
between 12 and 16 weeks after the initial cases (inclusive). These
integer sequences will most likely be contiguous but the function
does allow non-contiguous integer sequences.
}

If extinction occurs before the \code{extinction_week} window then the outbreak
extinction is considered extinct, however, if the extinction occurs within
the \code{extinction_week} window it is not considered extinct. Therefore,
using a single \code{integer} for \code{extinction_week} and thinking of this as
"\emph{has the outbreak gone extinct by week X}".}
}
\value{
\code{extinct_prob()}: a single \code{numeric} with the probability of extinction

\code{detect_extinct()}: a \code{data.table}, with two columns \code{sim} and \code{extinct}, for a binary
classification of whether the outbreak went extinct in each simulation
replicate. \code{1} is an outbreak that went extinct, \code{0} if not.
}
\description{
\code{extinct_prob()}: Calculate proportion of runs that have controlled outbreak

\code{detect_extinct()}: Calculate whether outbreaks went extinct or not
}
\details{
The data passed to \code{scenario} has to be produced by \code{\link[=scenario_sim]{scenario_sim()}}.
It cannot be produced by \code{\link[=outbreak_model]{outbreak_model()}} as it requires the \code{sim} column,
which is only appended in \code{\link[=scenario_sim]{scenario_sim()}}.

\emph{\strong{Warning}}: the output from \code{\link[=scenario_sim]{scenario_sim()}} contains an \code{cap_cases}
attribute which is used by \code{\link[=extinct_prob]{extinct_prob()}} and \code{\link[=detect_extinct]{detect_extinct()}},
therefore if you modify the output of \code{\link[=scenario_sim]{scenario_sim()}} before passing
to \code{\link[=extinct_prob]{extinct_prob()}} be careful not to drop the attribute (e.g.
from subsetting the \code{data.table}).
}
\examples{
res <- scenario_sim(
  n = 10,
  initial_cases = 1,
  offspring = offspring_opts(
    community = \(n) rnbinom(n = n, mu = 2.5, size = 0.16),
    isolated = \(n) rnbinom(n = n, mu = 0.5, size = 1)
  ),
  delays = delay_opts(
    incubation_period = \(n) rweibull(n = n, shape = 2.32, scale = 6.49),
    onset_to_isolation = \(n) rweibull(n = n, shape = 1.65, scale = 4.28)
  ),
  event_probs = event_prob_opts(
    asymptomatic = 0,
    presymptomatic_transmission = 0.5,
    symptomatic_ascertained = 0.2
  ),
  interventions = intervention_opts(quarantine = FALSE),
  sim = sim_opts(cap_max_days = 350, cap_cases = 4500)
)

# calculate probability of extinction
extinct_prob(res)

# determine if each outbreak simulation replicate has gone extinct
detect_extinct(res)
}
